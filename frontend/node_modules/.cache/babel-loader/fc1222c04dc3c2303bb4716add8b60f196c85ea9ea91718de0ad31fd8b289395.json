{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst handleResponse = async response => {\n  const contentType = response.headers.get('content-type');\n  if (!contentType || !contentType.includes('application/json')) {\n    const text = await response.text();\n    if (text.includes('<!DOCTYPE html>') || text.includes('<html')) {\n      throw new Error('Backend server is not responding properly. Please ensure the backend is running on port 5000.');\n    }\n    throw new Error(`Server returned unexpected response: ${text.substring(0, 100)}`);\n  }\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({\n      error: `HTTP error! status: ${response.status}`\n    }));\n    throw new Error(error.error || `HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\nconst fetchWithTimeout = (url, options = {}, timeout = 8000) => {\n  return Promise.race([fetch(url, options), new Promise((_, reject) => setTimeout(() => reject(new Error('Request timeout - backend server may be down')), timeout))]);\n};\nexport const api = {\n  getColleges: async (params = {}) => {\n    const queryParams = new URLSearchParams();\n    Object.entries(params).forEach(([key, value]) => {\n      if (value && value !== 'all') {\n        queryParams.append(key, value);\n      }\n    });\n    const response = await fetchWithTimeout(`${API_BASE_URL}/colleges?${queryParams}`);\n    return handleResponse(response);\n  },\n  getFilterOptions: async () => {\n    const response = await fetchWithTimeout(`${API_BASE_URL}/colleges/filters`);\n    return handleResponse(response);\n  },\n  getReviews: async () => {\n    const response = await fetchWithTimeout(`${API_BASE_URL}/reviews`);\n    return handleResponse(response);\n  },\n  addReview: async reviewData => {\n    const response = await fetchWithTimeout(`${API_BASE_URL}/reviews`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(reviewData)\n    });\n    return handleResponse(response);\n  },\n  deleteReview: async reviewId => {\n    const response = await fetchWithTimeout(`${API_BASE_URL}/reviews/${reviewId}`, {\n      method: 'DELETE'\n    });\n    return handleResponse(response);\n  },\n  getFavorites: async () => {\n    const response = await fetchWithTimeout(`${API_BASE_URL}/favorites`);\n    return handleResponse(response);\n  },\n  addFavorite: async collegeId => {\n    const response = await fetchWithTimeout(`${API_BASE_URL}/favorites`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        college_id: collegeId\n      })\n    });\n    return handleResponse(response);\n  },\n  removeFavorite: async collegeId => {\n    const response = await fetchWithTimeout(`${API_BASE_URL}/favorites/${collegeId}`, {\n      method: 'DELETE'\n    });\n    return handleResponse(response);\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","handleResponse","response","contentType","headers","get","includes","text","Error","substring","ok","error","json","catch","status","fetchWithTimeout","url","options","timeout","Promise","race","fetch","_","reject","setTimeout","api","getColleges","params","queryParams","URLSearchParams","Object","entries","forEach","key","value","append","getFilterOptions","getReviews","addReview","reviewData","method","body","JSON","stringify","deleteReview","reviewId","getFavorites","addFavorite","collegeId","college_id","removeFavorite"],"sources":["C:/Users/msaba/OneDrive/Desktop/AspireNet/College-Hub-CollegeManagementDashboard-/frontend/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst handleResponse = async (response) => {\r\n  const contentType = response.headers.get('content-type');\r\n\r\n  if (!contentType || !contentType.includes('application/json')) {\r\n    const text = await response.text();\r\n\r\n    if (text.includes('<!DOCTYPE html>') || text.includes('<html')) {\r\n      throw new Error('Backend server is not responding properly. Please ensure the backend is running on port 5000.');\r\n    }\r\n\r\n    throw new Error(`Server returned unexpected response: ${text.substring(0, 100)}`);\r\n  }\r\n\r\n  if (!response.ok) {\r\n    const error = await response.json().catch(() => ({\r\n      error: `HTTP error! status: ${response.status}`\r\n    }));\r\n    throw new Error(error.error || `HTTP error! status: ${response.status}`);\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nconst fetchWithTimeout = (url, options = {}, timeout = 8000) => {\r\n  return Promise.race([\r\n    fetch(url, options),\r\n    new Promise((_, reject) =>\r\n      setTimeout(() => reject(new Error('Request timeout - backend server may be down')), timeout)\r\n    )\r\n  ]);\r\n};\r\n\r\nexport const api = {\r\n  getColleges: async (params = {}) => {\r\n    const queryParams = new URLSearchParams();\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      if (value && value !== 'all') {\r\n        queryParams.append(key, value);\r\n      }\r\n    });\r\n\r\n    const response = await fetchWithTimeout(`${API_BASE_URL}/colleges?${queryParams}`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getFilterOptions: async () => {\r\n    const response = await fetchWithTimeout(`${API_BASE_URL}/colleges/filters`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getReviews: async () => {\r\n    const response = await fetchWithTimeout(`${API_BASE_URL}/reviews`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  addReview: async (reviewData) => {\r\n    const response = await fetchWithTimeout(`${API_BASE_URL}/reviews`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(reviewData)\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  deleteReview: async (reviewId) => {\r\n    const response = await fetchWithTimeout(`${API_BASE_URL}/reviews/${reviewId}`, {\r\n      method: 'DELETE'\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  getFavorites: async () => {\r\n    const response = await fetchWithTimeout(`${API_BASE_URL}/favorites`);\r\n    return handleResponse(response);\r\n  },\r\n\r\n  addFavorite: async (collegeId) => {\r\n    const response = await fetchWithTimeout(`${API_BASE_URL}/favorites`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ college_id: collegeId })\r\n    });\r\n    return handleResponse(response);\r\n  },\r\n\r\n  removeFavorite: async (collegeId) => {\r\n    const response = await fetchWithTimeout(`${API_BASE_URL}/favorites/${collegeId}`, {\r\n      method: 'DELETE'\r\n    });\r\n    return handleResponse(response);\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}